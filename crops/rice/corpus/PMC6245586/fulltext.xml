<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.1 20151215//EN" "JATS-archivearticle1.dtd"> 
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName A++V2.4.dtd?><?SourceDTD.Version 2.4?><?ConverterInfo.XSLTName springer2nlmx2.xsl?><?ConverterInfo.Version 1?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Med Genomics</journal-id><journal-id journal-id-type="iso-abbrev">BMC Med Genomics</journal-id><journal-title-group><journal-title>BMC Medical Genomics</journal-title></journal-title-group><issn pub-type="epub">1755-8794</issn><publisher><publisher-name>BioMed Central</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">6245586</article-id><article-id pub-id-type="pmid">30453969</article-id><article-id pub-id-type="publisher-id">418</article-id><article-id pub-id-type="doi">10.1186/s12920-018-0418-y</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research</subject></subj-group></article-categories><title-group><article-title>MiteFinderII: a novel tool to identify miniature inverted-repeat transposable elements hidden in eukaryotic genomes</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Hu</surname><given-names>Jialu</given-names></name><address><email>jhu@nwpu.edu.cn</email></address><xref ref-type="aff" rid="Aff1">1</xref><xref ref-type="aff" rid="Aff2">2</xref></contrib><contrib contrib-type="author"><name><surname>Zheng</surname><given-names>Yan</given-names></name><address><email>yan.zheng@nwpu-bioinformatics.com</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><contrib contrib-type="author" corresp="yes"><name><surname>Shang</surname><given-names>Xuequn</given-names></name><address><email>shang@nwpu.edu.cn</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 0307 1240</institution-id><institution-id institution-id-type="GRID">grid.440588.5</institution-id><institution>School of Computer Science, Northwestern Polytechnical University, </institution></institution-wrap>West Youyi Road 127, Xi&#x02019;an, 710072 China </aff><aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 0307 1240</institution-id><institution-id institution-id-type="GRID">grid.440588.5</institution-id><institution>Centre of Multidisciplinary Convergence Computing, School of Computer Science, Northwestern Polytechnical University, </institution></institution-wrap>Dong Xiang Road 1, Xi&#x02019;an, 710129 China </aff></contrib-group><pub-date pub-type="epub"><day>20</day><month>11</month><year>2018</year></pub-date><pub-date pub-type="pmc-release"><day>20</day><month>11</month><year>2018</year></pub-date><pub-date pub-type="collection"><year>2018</year></pub-date><volume>11</volume><issue>Suppl 5</issue><issue-sponsor>Publication of this supplement has not been supported by sponsorship. Information about the source of funding for publication charges can be found in the individual articles. The articles have undergone the journal's standard peer review process for supplements. The Supplement Editors declare that they have no competing interests.</issue-sponsor><elocation-id>101</elocation-id><permissions><copyright-statement>&#x000a9; The Author(s) 2018</copyright-statement><license license-type="OpenAccess"><license-p><bold>Open Access</bold> This article is distributed under the terms of the Creative Commons Attribution 4.0 International License(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p></license></permissions><abstract id="Abs1"><sec><title>Background</title><p>Miniature inverted-repeat transposable element (MITE) is a type of class II non-autonomous transposable element playing a crucial role in the process of evolution in biology. There is an urgent need to develop bioinformatics tools to effectively identify MITEs on a whole genome-wide scale. However, most of currently existing tools suffer from low ability to deal with large eukaryotic genomes.</p></sec><sec><title>Methods</title><p>In this paper, we proposed a novel tool MiteFinderII, which was adapted from our previous algorithm MiteFinder, to efficiently detect MITEs from genomics sequences. It has six major steps: (1) build K-mer Index and search for inverted repeats; (2) filtration of inverted repeats with low complexity; (3) merger of inverted repeats; (4) filtration of candidates with low score; (5) selection of final MITE sequences; (6) selection of representative sequences.</p></sec><sec><title>Results</title><p>To test the performance, MiteFinderII and three other existing algorithms were applied to identify MITEs on the whole genome of oryza sativa. Results suggest that MiteFinderII outperforms existing popular tools in terms of both specificity and recall. Additionally, it is much faster and more memory-efficient than other tools in the detection.</p></sec><sec><title>Conclusion</title><p>MiteFinderII is an accurate and effective tool to detect MITEs hidden in eukaryotic genomes. The source code is freely accessible at the website: <ext-link ext-link-type="uri" xlink:href="https://github.com/screamer/miteFinder">https://github.com/screamer/miteFinder</ext-link>.</p></sec></abstract><kwd-group xml:lang="en"><title>Keywords</title><kwd>Transposable element</kwd><kwd>K-mer index</kwd><kwd>Genomic analysis</kwd><kwd>Terminal inverted repeat</kwd><kwd>Target site duplication</kwd></kwd-group><conference xlink:href="https://muii.missouri.edu/bibm2017/"><conf-name>Selected articles from the IEEE BIBM International Conference on Bioinformatics &#x00026; Biomedicine (BIBM) 2017: medical genomics</conf-name><conf-loc>Kansas City, MO, USA</conf-loc><conf-date>13-16 November 2017</conf-date></conference><custom-meta-group><custom-meta><meta-name>issue-copyright-statement</meta-name><meta-value>&#x000a9; The Author(s) 2018</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="Sec1"><title>Background</title><p>Transposable elements (TEs) are present in many plants and animals, which make up of a large proportion of the genome. For example, 85% of the maize genome is made up of TEs [<xref ref-type="bibr" rid="CR1">1</xref>], as is 46% of the human genome [<xref ref-type="bibr" rid="CR2">2</xref>]. Transposable elements have contributed to evolution by causing gene variants and altering genomic structures and regulation of individual genes. It suggests that TEs are important in genome function and evolution. There are two major categories of TEs according to molecules involved in transposition: Class II TEs (also called retrotransposons) move through RNA intermediates, which can be described as copy and paste; Class II TEs (known as DNA transposons) encode the protein transposase, which can be described as cut and paste. Not all DNA transposons transpose through the cut-and-paste mechanism. TEs are also classified as autonomous and non-autonomous TEs based on whether they can move by themselves.Generally, non-autonomous TEs require another TE to move. Miniatures inverted repeat transposable element (MITE) is a special type of non-autonomous DNA transposons, which has a special structural feature and higher copy numbers in eukaryotic genomes. As shown in Fig.<xref rid="Fig1" ref-type="fig">1</xref>, MITE is a DNA sequences with about 50&#x02013;800 bp in genome, which contains short conserved terminal inverted repeats (TIR, &#x0003e;= 10bp) and an internal sequence. The whole MITE is flanked by a pair of target site duplication (TSD, about 2&#x02013;10 bp in length)[<xref ref-type="bibr" rid="CR3">3</xref>]. Because the MITEs are non-autonomous TEs, MITEs do not encode the proteins and have no coding potential for their transposition. Theoretically, MITEs should have perfect inverted repeats. Actually, there are a large number of MITEs without perfect inverted repeat (inverted repeats with some mismatches). In Fig.<xref rid="Fig1" ref-type="fig">1</xref>, the following sequence is a MITE sequence with perfect inverted repeats.</p><p>MITEs are associated with gene regulation in angiosperms. They play important roles in genome evolution. The movement of MITEs in genes may alter their structure and function and play a significant role in the evolution of organisms. For example, a big MITE family named stowaway in potato was found to cause phenotypic diversity of skin color by altering the structure of related genes [<xref ref-type="bibr" rid="CR4">4</xref>].
<fig id="Fig1"><label>Fig. 1</label><caption><p>The typical structure of a miniature inverted repeat transposable element. The length of MITE is between 50&#x02013;800bp, and a complete MITE contains a pair of terminal inverted repeat(TIR) and a internal sequence. MITEs usually are flanked by a target site duplication(TSD). The following example sequence is a typical MITE sequence, the blue part is the TIR of MITE and the red part is the TSD</p></caption><graphic xlink:href="12920_2018_418_Fig1_HTML" id="MO1"/></fig></p><p>Therefore, there is an urgent demand for the development of bioinformatics tools to accurately and efficiently detect MITEs in whole genomes. It would help us get a better understanding of the gene regulatory mechanism in genome-wide association studies [<xref ref-type="bibr" rid="CR5">5</xref>&#x02013;<xref ref-type="bibr" rid="CR8">8</xref>].</p><p>To identify TE on a genome scale, three existing tools have been developed, including MITE-Hunter [<xref ref-type="bibr" rid="CR9">9</xref>], MITE Digger [<xref ref-type="bibr" rid="CR10">10</xref>] and detectMITE [<xref ref-type="bibr" rid="CR3">3</xref>]. MITE-Hunter firstly finds all possible candidates based on the TIR-like structure, and then filters false positive ones by using pairwise sequence alignment and multiple sequence alignment, generates exemplars and groups all MITEs into families. MITE Digger searches for MITEs using redundant computing and then reduces the redundancy by computing a representative of the family. The latest developed tool detectMITE employs a numeric calculation approach to replace string matching algorithm in the MITE detection, adopts the Lempel-Ziv complexity algorithm to filter out candidates with low complexity and utilizes CD-Hit to cluster them into different families. However, both MITE-Hunter [<xref ref-type="bibr" rid="CR11">11</xref>] and MITE Digger save the computation complexity by sacrificing sensitivity and precision [<xref ref-type="bibr" rid="CR12">12</xref>]. The algorithm of detectMITE is not only time-consuming, but it requires large computational resources. It is hard to run detectMITE on large genomes with a machine with moderate memory.</p><p>Due to these weak points of current MITE detection tools, it is necessary to develop a more accurate and effective tool to study the MITEs in a genome-wide scale. However, there are two basic challenges: (1) identification of TIR-like structure from a whole genome: (2) filtration of false positive candidates.</p><p>To solve these problems, we proposed a novel computational tool MiteFinder [<xref ref-type="bibr" rid="CR13">13</xref>], which can accurately, comprehensively and efficiently detect MITEs in a whole genome. Meanwhile, it is more memory-efficient and much faster than all existing tools by building k-mer index for genomic fragments. MiteFinderII is extended from MiteFinder. Compared with MiteFinder, MiteFinderII adds new function to cluster MITE sequences into different MITE families and it is easy and simple to be executed by non-professional users.</p></sec><sec id="Sec2"><title>Methods</title><p>In order to make improvements for existing tools, we have developed a new program in C++ language, MiteFinderII, which can be used to detect both perfect inverted repeats and imperfect inverted repeats utilizing the string matching approach [<xref ref-type="bibr" rid="CR14">14</xref>]. As non-autonomous DNA transposons, the structure of MITE is characterized by the terminal inverted repeats. All existing tools consumed most of the time searching for all possible terminal inverted repeats [<xref ref-type="bibr" rid="CR15">15</xref>]. To speed up the computation in this stage, we employ a hash function to build index for each k-mer in the sequence fragments. Compared to our previous tool, MiteFinderII can set up the parameter in linux command, which is more convenient to use. The input data of program is genome sequences in the FASTA format. The genome of rice contains a large number of transposable elements, and rice is a model plant for genome science of grasses since its genome sequence has been completely determined. MITEs have the highest copy number among transposable elements in rice [<xref ref-type="bibr" rid="CR16">16</xref>], which constitute approximately one-third of the genome sequence [<xref ref-type="bibr" rid="CR17">17</xref>]. The whole genome sequence of rice can be downloaded on internet freely, so the genome of rice is selected as our test data (MSU Rice Genome Annotation Project Release 6.1, 369 Mega Byte). The test data is the genome sequences in the FASTA format, which has been downloaded from the NCBI website. As shown in Fig.<xref rid="Fig2" ref-type="fig">2</xref>, the core algorithm of MiteFinderII consists of five major steps. The detailed description of each step is introduced in the following sections.
<fig id="Fig2"><label>Fig. 2</label><caption><p>The core algorithm of MiteFinderII in the MITE detection. <bold>a</bold> A whole genome was cut into many pieces of sequence fragments and the build of k-mer index for each fragment. <bold>b</bold> Search for sequences seeds by using k-mer index. Each seed requires at least 10bp inverted repeats (TIR structure); <bold>c</bold> Extend these seeds to a complete MITE structure by merging smaller ones, including TSD structure; <bold>d</bold> Calculate the likelihood score for each MITE candidate using log-ratio model, filter away these candidates with low score; <bold>e</bold> filter these candidates with similar sequences in the flanking regions. <bold>f</bold> Select out the represent sequences of MITE families</p></caption><graphic xlink:href="12920_2018_418_Fig2_HTML" id="MO2"/></fig></p><sec id="Sec3"><title>Build K-mer index and search inverted repeats</title><p>Firstly, we attempt to detect all possible inverted repeats. In the FASTA format of genome sequences, the first line is headed by &#x02018; &#x0003e;&#x02019;, followed by its literal description. The chromosome data starts from the second line. It ends until it reaches next chromosome. In MiteFinderII, every chromosome will be traversed to get the size of every chromosome and then every chromosome will be stored in an optimum amount of memory to be more memory-efficient. Memory will be released automatically at the end of the program. For an input genome, all sequence fragments that have a TIR pair (&#x0003e;= 10 bp in length) and a TSD pair (2&#x02013;10bp) will be identified. We identify inverted repeats by TIR pair detection in program. First, each chromosome sequences will be divided into multiple sequence fragments with same length (default 10,000 bp). There is a common sequence (800 bp, the maximum length of MITE) between the adjacent fragments to ensure that all inverted repeats are identified. Secondly, we divide the sequence fragment into multiple adjacent fragments with length is 10 bp, all inverted repeats (the length of TIR &#x0003e;= 10 bp, so the initial length of TIR in inverted repeats is 10 bp) will be stored in an unordered_map (as k-mer index). The key of unordered_map is used to storage the sequence of inverted repeats and the value is used to store the position of inverted repeats with same sequence (key is a string and value is a vector of integer). We can retrieve the position of inverted repeats in the unordered_map. The program utilizes unordered_map since it can fast retrieve a certain sequence in detection [<xref ref-type="bibr" rid="CR18">18</xref>]. There is a pair of TIR and an internal sequence in a MITE, so we create a function in program to obtain the inverted repeat sequence of inverted repeat. We detect all pairs of TIR that can match each other. The pairs of TIR with length between 50&#x02013;800 bp will be retained. The rest pairs of TIR will be used as seeds of MITE candidates in next step.</p></sec><sec id="Sec4"><title>Filtration of inverted repeats with low complexity</title><p>All inverted repeats will be stored in a list including the starting position and ending position of each inverted repeats. These inverted repeats with low complexity should be filtered out, since they are less likely to be in MITE families. First, there are two TIR in an inverted repeat. Each putative TIR that meets one of the following criteria was filtrated as low complexity cases to improve the efficiency and accuracy: (1) it contains &#x0003e;= 8bp homopolymer or dinucleotide in TIR; (2) it contains &#x0003c; 20% G/C or A/T content. All seeds of MITE candidates will be identified after all inverted repeats is determined. Next, the adjacent inverted repeats must be merged because the inverted repeats belong to the same MITE candidate. As shown in Fig.<xref rid="Fig3" ref-type="fig">3</xref>, an inverted repeat with a TIR of 11 bp in length will be divided into two inverted repeats stored in a list. In this step, our work is to merge inverted repeats as shown in Fig.<xref rid="Fig3" ref-type="fig">3</xref>. The merged inverted repeats will be selected in next step as MITE candidates. However, most inverted repeats are incomplete, so some inverted repeats without adjacent position should be merged.
<fig id="Fig3"><label>Fig. 3</label><caption><p>Two adjacent perfect inverted repeats with the length of 10bp were merged into a bigger one with the length of 11bp</p></caption><graphic xlink:href="12920_2018_418_Fig3_HTML" id="MO3"/></fig></p></sec><sec id="Sec5"><title>Merger of inverted repeats</title><p>In Fig.<xref rid="Fig3" ref-type="fig">3</xref>, it shows how the adjacent inverted repeats should be merged. For perfect inverted repeats, we merge them by retaining one of them and altering the position information. However, not all inverted repeats can match perfectly, and the imperfect inverted repeats must be considered. Imperfect inverted repeats are abundant in MITEs. Therefore, inverted repeats with some unmatched base pair (default = 1) are also considered to be MITE candidates. We should retain the imperfect inverted repeats in the detection of TIR pairs. So we modified the function of extract_seed_from_map and storage the imperfect inverted repeats in the list. The function will find the all TIR candidates that have only one base differed from the perfect inverted repeats and get all imperfect inverted repeats. The function only obtains the imperfect inverted repeats that mismatch position does not appear in the start and end. The function of merge MITE also is modified to deal with the problem that a MITE candidate missing when a complete imperfect inverted repeat is merged. We add two parameters named &#x02018;mis&#x02019; and &#x02018;mispos&#x02019; in the function. The &#x02018;mis&#x02019; is used to record the MITE is perfect or imperfect and &#x02018;mispos&#x02019; is used to record the position of mismatch. An imperfect inverted repeat is shown in Fig.<xref rid="Fig4" ref-type="fig">4</xref>, the red base is the position of mismatch. The position of the front red base is 3468 and the back is 3652. The MITE candidates will be stored in list just like Fig.<xref rid="Fig4" ref-type="fig">4</xref>. The MITE candidates contain the mismatch base will store the position of the mismatch base and the parameter of &#x02018;mis&#x02019; is 1. When an imperfect MITE and a perfect MITE merge, the difference between positions of TIR is 2 is also obtained and the &#x02018;mis&#x02019; is recorded by 1 and &#x02018;mispos&#x02019; is recorded by the position of mismatch. When two perfect MITEs merges, we utilize same method to merge the MITE candidates in the last step. The merger of two imperfect MITEs will be filtration as the false positive case. After the merger of inverted repeats, MITE candidates that length of TSD is not between 2&#x02013;10 bp or if the length of TSD is 2 and TSD is not &#x02018;TA&#x02019; were filtrated out as false positive cases.
<fig id="Fig4"><label>Fig. 4</label><caption><p>An example of imperfect MITE candidates, which has one mismatch base. In this example, the mismatch position in the left hand of TIR is 3468. And all these short candidates in the table were merged into a longer imperfect MITE</p></caption><graphic xlink:href="12920_2018_418_Fig4_HTML" id="MO4"/></fig></p></sec><sec id="Sec6"><title>Filtration of candidates with low score</title><p>From the above steps, we obtain complex MITE candidates which have TIR-like structure and TSD structures. To improve the precision, we create a scoring formula to filtrate the false positive cases in the rest MITE candidates. We create a model named MITE model, which contains more than 30,000 MITE sequences. A null model contains more than 160,000 sequences. which include both non-MITE sequences. The positive MITE sequences are the sequences that have high similarity with the MITEs have been found in the Repbase database. The false positive MITE sequences are the inverted repeat sequences found in genome with complete MITE structure but have low similarity with the MITE in Repbase. We deal the sequences as follows. We divide the all MITE sequences into the fragments that length is 6 bp. We calculate the sum of every fragment that appears in the positive MITE sequences and false positive MITE sequences. For the MITE candidates found in the third step, we divide every sequence into fragments with the same length. For every given fragments S that length is 6 bp, the score of S is: 
<disp-formula id="Equa"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$F(s)=\log_{2} \frac{Pr(S/M)}{Pr(S/N)} $$ \end{document}</tex-math><mml:math id="M2"><mml:mrow><mml:mi>F</mml:mi><mml:mo>(</mml:mo><mml:mi>s</mml:mi><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:munder><mml:mrow><mml:mo>log</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:munder><mml:mfrac><mml:mrow><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>(</mml:mo><mml:mi>S</mml:mi><mml:mo>/</mml:mo><mml:mi>M</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>(</mml:mo><mml:mi>S</mml:mi><mml:mo>/</mml:mo><mml:mi>N</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:math><graphic xlink:href="12920_2018_418_Article_Equa.gif" position="anchor"/></alternatives></disp-formula></p><p>S/M is the probability of S appears in M (M is the positive MITE sequences data set), S/N is the probability of S appears in N (N is the false positive MITE sequences data set). We assume that the longer of the sequence, the more times of the different fragments appears in the sequence. The effects of the length must be considered, so the score of sequence must be divided by length to eliminate effects. The score of sequence that length is n is: 
<disp-formula id="Equb"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$Score=\sum\limits_{i=1}^{N-5} F(i)/(n-5) $$ \end{document}</tex-math><mml:math id="M4"><mml:mrow><mml:mtext mathvariant="italic">Score</mml:mtext><mml:mo>=</mml:mo><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mo mathsize="big">&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>N</mml:mi><mml:mo>&#x02212;</mml:mo><mml:mn>5</mml:mn></mml:mrow></mml:munderover><mml:mi>F</mml:mi><mml:mo>(</mml:mo><mml:mi>i</mml:mi><mml:mo>)</mml:mo><mml:mo>/</mml:mo><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>&#x02212;</mml:mo><mml:mn>5</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:math><graphic xlink:href="12920_2018_418_Article_Equb.gif" position="anchor"/></alternatives></disp-formula> We get all scores of the MITE candidates from the above formula. In MiteFinderII, the parameter of scores can be set up by user. After several tests, we choose 0 as the default criteria, the MITE candidates that score greater than 0 were retain as the true positive MITEs, and the rest MITE candidates were filtrated.</p></sec><sec id="Sec7"><title>Selection of final MITE sequences</title><p>In the previous steps, the MITE candidates have been preliminary screening. The further screening is necessary to improve the accuracy of program. MiteFinderII clusters MITE candidates with a pair of flanking sequence (length is 60 bp) into the distinctive families based on their sequence similarity by all-by-all BLASTN comparison (default e-value =1e-10). When a MITE is transposed in the genome, it is less likely that its flanking sequences are transposed together, so we discard the MITEs that share similarity in their flanking sequence. From the results of BLASTN, each putative MITE that meets all of the following criteria was retained as true positive case: 1. pident value &#x0003e;80<italic>%</italic>, 2. those MITE candidates that share sequence similarity within but not in their flanking regions. The remaining MITE sequences are the sequences for MITE families.</p></sec><sec id="Sec8"><title>Selection of represent sequences</title><p>Compared with MiteFinder, MITE sequences we got in the last step are the final MITE sequences in rice. Unlike the traditional low copy non-autonomous TEs, the MITEs amplify rapidly from one or few elements to high copy numbers. Hence, similar sequences should be clustered into a MITE family. We compared MITE sequences (without flanking sequences) identified in the last step with each other by BLASTN. In the previous test, we found that different MITE sequences have high similarity. We choose 1e-100 as the criteria for clustering. We use the results of BLASTN to build a network. These nodes clustered in a same group consist of a MITE family. For each cluster, only these group with more than three members were retained as valid MITE families. The MITE sequences with highest degree in each MITE families were selected as the representive MITE sequences. Finally, 11,239 MITE families in rice genomes are identified.</p></sec></sec><sec id="Sec9" sec-type="results"><title>Results</title><p>To test the accuracy and efficiency, we performed other three existing tools detectMITE, MITE Digger and MITE-Hunter to detect MITEs from the oryza sativa genome. The MiteFinderII, detectMITE and MITE-Hunter performed in Ubuntu system with one core. Since the Linux version of MITE Digger is not available, we performed MITE Digger in windows with one core.</p><sec id="Sec10"><title>The efficiency of MiteFinderII</title><p>As shown in Fig.<xref rid="Fig5" ref-type="fig">5</xref>, MiteFinderII spent only 1 h and 20 min to detect MITEs from the whole genome of rice and 11,239 MITE families were identified (include 26,704 MITE sequences). In contrast, detectMITE took 44.94 h and found 4838 MITE families, MITE-Hunter took more than 70 h and found 333 MITE families with the length between 50 and 800bp (parameter: max group is 1 and the number of CPU is 1). MITE Digger took 20 h and 15 min to detect 5499 MITE sequences that have a complete TIR and TSD structure (50&#x02013;800 bp) in the whole genome. Although MITE Digger is running on different system, it is obvious that MiteFinderII is more efficient than other tools.
<fig id="Fig5"><label>Fig. 5</label><caption><p>MITE number and processing time. MITE number is the total number of MITE sequences that each tool can identify on the rice genome and processing time is the total time of each tool running on the rice genome with 1 CPU core</p></caption><graphic xlink:href="12920_2018_418_Fig5_HTML" id="MO5"/></fig></p><p>The sequence comparison is time-consuming by using BLASTN. It takes only 1361 s to detect MITE candidates, excluding the clustering step on networks. MiteFinderII was also performed on other datasets. It costs 2273 s and 6751 s in the detection of MITEs on Sorghum (684 Mega Byte) and zea mays (2058 Mega Byte), respectively. MiteFinderII takes about 1 h to detect MITE candidates on a genome of one Giga Bytes.</p></sec><sec id="Sec11"><title>The distribution of superfamily of MITEs</title><p>There are two major superfamilies of MITEs, named stowaway and tourist. Stowaway is a superfamily of MITEs with &#x02018;TA&#x02019; as the TSD, which is widespread and abundant in plant genomes. Tourist is a superfamily of MITEs with &#x02018;TAA&#x02019; as the TSD. There are some other superfamilies such as hAT (5, 6, 8 bp TSDs) and Mutator (9, 10 bp TSDs) [<xref ref-type="bibr" rid="CR19">19</xref>]. In plant genomes, these families have hundreds of copies and can change the structure of genes. The transposition is strongly related to the diversity and evolution of genes. We classify MITE sequences by TSD into different superfamilies and study the distribution of MITEs in rice genome. There are 963 Stowaway MITE sequences, 140 Tourist MITE sequences, 690 Mutator MITE sequences and 3314 hAT MITE sequences in the result of MiteFinderII. The distribution of all MITE sequences are shown in Fig.<xref rid="Fig6" ref-type="fig">6</xref>.
<fig id="Fig6"><label>Fig. 6</label><caption><p>The distribution of four MITE family sequences on the 12 rice chromosomes. The left ordinate is the size of chromosomes. The right ordinate is the number of different super families.The abscissa is the number of chromosomes. The length of the 12 rice chromosomes is 43.27M, 35.93M, 36.41M, 35.28M, 29.90M, 31.25M, 29.70M, 28.44M, 23.01M, 23.14M, 28.51M and 27.50M, respectively</p></caption><graphic xlink:href="12920_2018_418_Fig6_HTML" id="MO6"/></fig></p><p>As shown in Fig.<xref rid="Fig6" ref-type="fig">6</xref>, there doesn&#x02019;t exist an obvious linear correlation between super families and chromosomal length. The Stowaway sequences are abundantly distributed in chromosome 6 and chromosome 1. Tourist sequences in chromosome 12 are less than these in chromosome 9, 10. There are only 7 tourist sequences in chromosome 12.</p></sec><sec id="Sec12"><title>The accuracy of MiteFinderII</title><p>To evaluate the performance of MiteFinderII, we performed MiteFinderII and other existing tools on datasets from the Repbase database [<xref ref-type="bibr" rid="CR20">20</xref>]. Repbase is a comprehensive repeat database that contains both transposon elements and other repeats. It has been widely utilized in genome annotation. According to the characteristics of MITE, we extracted out all complex non-autonomous DNA transposable elements of rice. We found 1437 complex non-autonomous DNA transposable elements in oryza sativa genome, 547 of which have a length of 50&#x02013;800 bp. The sequences extracted from Repbase are the complex non-autonomous DNA transposable elements of rice. MITEs sequences in Repbase have been updated regularly. We can always find many new MITE sequences after it was updated every time. Compared to MiteFinder, MiteFinderII has a better performance in terms of recall. We also compared the results of MiteFinderII with that of three other algorithms, MITE Digger, detectMITE and MITE-Hunter using BLASTN (e-value =1e-10 as a threshold). The results are shown in Table&#x000a0;<xref rid="Tab1" ref-type="table">1</xref>. The match number is the number of MITE sequences that can match a similar sequence in Repbase. The Repbase number is the number of sequences of Repbase that can match a similar sequence in the results of each tool.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>The results of four algorithms in the detection of MITEs on the rice genomes</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Tools</th><th align="left">MITE number</th><th align="left">Match number</th><th align="left">Repbase number</th></tr></thead><tbody><tr><td align="left">detectMTIE</td><td align="left">4838</td><td align="left">1461</td><td align="left">213</td></tr><tr><td align="left">MITE Digger</td><td align="left">5499</td><td align="left">1847</td><td align="left">194</td></tr><tr><td align="left">MITE-Hunter</td><td align="left">333</td><td align="left">109</td><td align="left">112</td></tr><tr><td align="left">MiteFinderII</td><td align="left">11,239</td><td align="left">2631</td><td align="left">287</td></tr></tbody></table></table-wrap></p><p>As shown in Table&#x000a0;<xref rid="Tab1" ref-type="table">1</xref>, detectMite found 4838 MITE families, 1461 of which can match with 213 reference MITE sequences in Repbase. The precision is 33.59% and the true positive rate is 35.47%. MITE Digger found 5499 MITEs, 1847 of which match with 194 MITEs in Repbase. The precision is 30.20% and the true positive rate is 38.90%. The output files of MITE-Hunter include multiple alignment files and consensus TE sequences grouped into families. MITE-Hunter detected 303 MITE families. The algorithm of detectMITE found 109 MITE families, The precision is 32.73% and the true positive rate is 20.48%. MiteFinderII detected 11,239 perfect MITEs, 2631 of which match with 287 MITEs of Repbase. The precision is 23.41% and the true positive rate is 52.47%. To evaluate the performance, we used F-measure as a standard measure to evaluate the performance of MiteFinderII and other existing tools. F-measure is a common evaluation standard in information retrieval [<xref ref-type="bibr" rid="CR21">21</xref>], which can be written in the following formula, 
<disp-formula id="Equc"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$F_{\beta}=\frac{\left(\beta^{2}+1\right)precision*recall}{\beta^{2}(precision+recall)}. $$ \end{document}</tex-math><mml:math id="M6"><mml:mrow><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>&#x003b2;</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msup><mml:mrow><mml:mi>&#x003b2;</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mfenced><mml:mtext mathvariant="italic">precision</mml:mtext><mml:mo>&#x02217;</mml:mo><mml:mtext mathvariant="italic">recall</mml:mtext></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>&#x003b2;</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>(</mml:mo><mml:mtext mathvariant="italic">precision</mml:mtext><mml:mo>+</mml:mo><mml:mtext mathvariant="italic">recall</mml:mtext><mml:mo>)</mml:mo></mml:mrow></mml:mfrac><mml:mi>.</mml:mi></mml:mrow></mml:math><graphic xlink:href="12920_2018_418_Article_Equc.gif" position="anchor"/></alternatives></disp-formula></p><p>F1-score is commonly used, which is <italic>&#x003b2;</italic>=1.</p><p>Here, the reference sequences of Repbase are non-autonomous transposable elements of rice genome. As shown in Table&#x000a0;<xref rid="Tab2" ref-type="table">2</xref>, MiteFinderII and detectMITE have the highest F-score (0.42), followed by MITE Digger. MiteFinderII has the best performance in recall, while detectMITE has the best performance in terms of precision. MITE-Hunter has a good performance in precision, but it has the smallest score in recall (Recall =TP/TP+FN and Precision =TP/TP+FP).
<table-wrap id="Tab2"><label>Table 2</label><caption><p>The performance of four algorithms on recall, precision and F1-measure</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Tools</th><th align="left">Recall</th><th align="left">Precision</th><th align="left">F-measure</th></tr></thead><tbody><tr><td align="left">detectMTIE</td><td align="left">35.47<italic>%</italic></td><td align="left">33.59<italic>%</italic></td><td align="left">0.35</td></tr><tr><td align="left">MITE Digger</td><td align="left">38.90<italic>%</italic></td><td align="left">30.20<italic>%</italic></td><td align="left">0.37</td></tr><tr><td align="left">MITE-Hunter</td><td align="left">20.48<italic>%</italic></td><td align="left">32.73<italic>%</italic></td><td align="left">0.22</td></tr><tr><td align="left">MiteFinderII</td><td align="left">52.47<italic>%</italic></td><td align="left">23.41<italic>%</italic></td><td align="left">0.42</td></tr></tbody></table></table-wrap></p></sec></sec><sec id="Sec13" sec-type="discussion"><title>Discussion</title><p>MITE-Hunter, MITE Digger are notable existing tools, which can detect the ubiquitous MITEs hidden in eukaryotic genomes. Most tools have good performance in MITE detection due to the tir-like structure of MITEs. However, it is still a challenge to effectively detect MITEs in a genome-wide scale. The MITE-Hunter and MITE Digger that using both de novo and structure-based approaches can apparently improve the detect accuracy. However, some MITEs hidden in genome will be missed by MITE Hunter and MITE Digger. Comparing to existing tools, detectMITE has the best precision and F-measure, but it is memory-inefficient. It&#x02019;s hard to run the program on a machine with moderate computational resources. Compared with detectMITE, MiteFinderII is fast and memory-efficient. It takes the shortest time and only 400M internal memory for the rice genome. Compared with detectMITE, MITE-Hunter and MITE Digger, MiteFinderII detect more MITEs and MITE sequences in Repbase. Compared with MITE-Hunter and MITE Digger, MiteFinderII has the best true positive rate. From the analyses, it is obvious that MiteFinderII outperforms other tools in terms of accuracy and efficiency.</p></sec><sec id="Sec14" sec-type="conclusion"><title>Conclusions</title><p>An efficient detection of MITEs from eukaryotic genomes is a crucial step for the understanding of gene mutation and regulation. Here, we introduce a novel algorithm, MiteFinderII, which can fast, accurately and comprehensively detect MITEs in whole genomes of eukaryotes. Hash functions were employed to build k-mer indexes for genomic fragments, which can speedup the retrieval of terminal inverted repeats using string matching approaches. A new log-ratio scoring model was designed to calculate the likelihood score of MITE candidates, which enables us to improve the accuracy of MITE detection. We performed MiteFinderII and all other existing tools on the same data of oryza sativa genome. The results show that MiteFinderII is more memory-efficient and much faster than all other existing tools. It is two orders of magnitude faster than detectMITE, which is the latest tool developed for MITE detection. Meanwhile, it can identify the most comprehensive MITEs in the rice genome with the best F-score. In addition, we carried out genome-wide analyses for the distribution of MITE families in different chromosomes. The results indicates that MITE sequences are widely distributed in the genome of rice and play important roles in the gene expression. We also performed MiteFinderII in other plant genomes. MiteFinderII provides many improvements to currently existing tools in the detection of MITEs, which would greatly benefit the research community working on the genome-wide association studies and function annotations.</p></sec></body><back><glossary><title>Abbreviations</title><def-list><def-item><term>MITE</term><def><p>Miniature inverted-repeat transposable element</p></def></def-item><def-item><term>TE</term><def><p>Transposable element</p></def></def-item><def-item><term>TIR</term><def><p>Terminal inverted repeats</p></def></def-item><def-item><term>TSD</term><def><p>Target site duplication</p></def></def-item></def-list></glossary><ack><title>Acknowledgements</title><p>Many thanks go to Jiajie Peng and Bolin Chen for their insights into genomic comparisons in the discussion of this project.</p><sec id="d29e910"><title>Funding</title><p>Publication costs were funded by the National Natural Science Foundation of China (Grant No. 61702420); This project has been funded by the National Natural Science Foundation of China (Grant No. 61332014, 61702420 and 61772426); the China Postdoctoral Science Foundation (Grant No. 2017M613203); the Natural Science Foundation of Shaanxi Province (Grant No. 2017JQ6037); the Fundamental Research Funds for the Central Universities (Grant No. 3102018zy032).</p></sec><sec id="d29e915"><title>About this supplement</title><p>This article has been published as part of <italic>BMC Medical Genomics Volume 11 Supplement 5, 2018: Selected articles from the IEEE BIBM International Conference on Bioinformatics &#x00026; Biomedicine (BIBM) 2017: medical genomics</italic>. The full contents of the supplement are available online at <ext-link ext-link-type="uri" xlink:href="https://bmcmedgenomics.biomedcentral.com/articles/supplements/volume-11-supplement-5">https://bmcmedgenomics.biomedcentral.com/articles/supplements/volume-11-supplement-5</ext-link>.</p></sec></ack><notes notes-type="author-contribution"><title>Authors&#x02019; contributions</title><p>JH designed the computational framework and implemented the algorithm, MiteFinderII. YZ performed all the analyses of the data and wrote the manuscript. XS is the major coordinator, who contributed a lot of time and efforts in the discussion of this project. All authors read and approved the final manuscript.</p></notes><notes notes-type="COI-statement"><sec><title>Ethics approval and consent to participate</title><p>Not applicable.</p></sec><sec><title>Consent for publication</title><p>Not applicable.</p></sec><sec><title>Competing interests</title><p>The authors declare that they have no competing interests.</p></sec><sec><title>Publisher&#x02019;s Note</title><p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p></sec></notes><ref-list id="Bib1"><title>References</title><ref id="CR1"><label>1</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schnable</surname><given-names>PS</given-names></name><name><surname>Ware</surname><given-names>D</given-names></name><name><surname>Fulton</surname><given-names>RS</given-names></name><name><surname>Stein</surname><given-names>JC</given-names></name><name><surname>Wei</surname><given-names>F</given-names></name><name><surname>Pasternak</surname><given-names>S</given-names></name><name><surname>Liang</surname><given-names>C</given-names></name><name><surname>Zhang</surname><given-names>J</given-names></name><name><surname>Fulton</surname><given-names>L</given-names></name><name><surname>Graves</surname><given-names>TA</given-names></name></person-group><article-title>The b73 maize genome: complexity, diversity, and dynamics</article-title><source>Science</source><year>2009</year><volume>326</volume><issue>5956</issue><fpage>1112</fpage><lpage>5</lpage><pub-id pub-id-type="doi">10.1126/science.1178534</pub-id><pub-id pub-id-type="pmid">19965430</pub-id></element-citation></ref><ref id="CR2"><label>2</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lander</surname><given-names>ES</given-names></name><name><surname>Linton</surname><given-names>LM</given-names></name><name><surname>Birren</surname><given-names>B</given-names></name><name><surname>Nusbaum</surname><given-names>C</given-names></name><name><surname>Zody</surname><given-names>MC</given-names></name><name><surname>Baldwin</surname><given-names>J</given-names></name><name><surname>Devon</surname><given-names>K</given-names></name><name><surname>Dewar</surname><given-names>K</given-names></name><name><surname>Doyle</surname><given-names>M</given-names></name><name><surname>Fitzhugh</surname><given-names>W</given-names></name></person-group><article-title>Initial Sequencing and analysis of the human genome</article-title><source>Nature</source><year>2001</year><volume>409</volume><issue>6822</issue><fpage>860</fpage><pub-id pub-id-type="doi">10.1038/35057062</pub-id><pub-id pub-id-type="pmid">11237011</pub-id></element-citation></ref><ref id="CR3"><label>3</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ye</surname><given-names>C</given-names></name><name><surname>Ji</surname><given-names>G</given-names></name><name><surname>Liang</surname><given-names>C</given-names></name></person-group><article-title>detectmite: A novel approach to detect miniature inverted repeat transposable elements in genomes</article-title><source>Sci Rep</source><year>2016</year><volume>6</volume><fpage>19688</fpage><pub-id pub-id-type="doi">10.1038/srep19688</pub-id><pub-id pub-id-type="pmid">26795595</pub-id></element-citation></ref><ref id="CR4"><label>4</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Momose</surname><given-names>M</given-names></name><name><surname>Abe</surname><given-names>Y</given-names></name><name><surname>Ozeki</surname><given-names>Y</given-names></name></person-group><article-title>Miniature inverted-repeat transposable elements of stowaway are active in potato</article-title><source>Genetics</source><year>2010</year><volume>186</volume><issue>1</issue><fpage>59</fpage><lpage>66</lpage><pub-id pub-id-type="doi">10.1534/genetics.110.117606</pub-id><pub-id pub-id-type="pmid">20610409</pub-id></element-citation></ref><ref id="CR5"><label>5</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hu</surname><given-names>J</given-names></name><name><surname>Gao</surname><given-names>Y</given-names></name><name><surname>Zheng</surname><given-names>Y</given-names></name><name><surname>Shang</surname><given-names>X</given-names></name></person-group><article-title>Kf-finder: Identification of key factors from host-microbial networks in cervical cancer</article-title><source>BMC Syst Biol</source><year>2018</year><volume>12</volume><issue>S4</issue><fpage>54</fpage><pub-id pub-id-type="doi">10.1186/s12918-018-0566-x</pub-id><pub-id pub-id-type="pmid">29745858</pub-id></element-citation></ref><ref id="CR6"><label>6</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hu</surname><given-names>J</given-names></name><name><surname>Shang</surname><given-names>X</given-names></name></person-group><article-title>Detection of network motif based on a novel graph canonization algorithm from transcriptional regulation networks</article-title><source>Molecules</source><year>2017</year><volume>22</volume><issue>12</issue><fpage>2194</fpage><pub-id pub-id-type="doi">10.3390/molecules22122194</pub-id></element-citation></ref><ref id="CR7"><label>7</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Peng</surname><given-names>J</given-names></name><name><surname>Wang</surname><given-names>H</given-names></name><name><surname>Lu</surname><given-names>J</given-names></name><name><surname>Hui</surname><given-names>W</given-names></name><name><surname>Wang</surname><given-names>Y</given-names></name><name><surname>Shang</surname><given-names>X</given-names></name></person-group><article-title>Identifying term relations cross different gene ontology categories</article-title><source>BMC Bioinforma</source><year>2017</year><volume>18</volume><issue>16</issue><fpage>573</fpage><pub-id pub-id-type="doi">10.1186/s12859-017-1959-3</pub-id></element-citation></ref><ref id="CR8"><label>8</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Peng</surname><given-names>J</given-names></name><name><surname>Wang</surname><given-names>Y</given-names></name><name><surname>Chen</surname><given-names>J</given-names></name><name><surname>Shang</surname><given-names>X</given-names></name><name><surname>Shao</surname><given-names>Y</given-names></name><name><surname>Xue</surname><given-names>H</given-names></name></person-group><article-title>A novel method to measure the semantic similarity of hpo terms</article-title><source>Int J Data Min Bioinforma</source><year>2017</year><volume>17</volume><issue>2</issue><fpage>173</fpage><pub-id pub-id-type="doi">10.1504/IJDMB.2017.084268</pub-id></element-citation></ref><ref id="CR9"><label>9</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Han</surname><given-names>Y</given-names></name><name><surname>Wessler</surname><given-names>SR</given-names></name></person-group><article-title>Mite-hunter: a program for discovering miniature inverted-repeat transposable elements from genomic sequences</article-title><source>Nucleic Acids Res</source><year>2010</year><volume>38</volume><issue>22</issue><fpage>199</fpage><pub-id pub-id-type="doi">10.1093/nar/gkq862</pub-id></element-citation></ref><ref id="CR10"><label>10</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yang</surname><given-names>G</given-names></name></person-group><article-title>Mite digger, an efficient and accurate algorithm for genome wide discovery of miniature inverted repeat transposable elements</article-title><source>BMC Bioinforma</source><year>2013</year><volume>14</volume><issue>1</issue><fpage>186</fpage><pub-id pub-id-type="doi">10.1186/1471-2105-14-186</pub-id></element-citation></ref><ref id="CR11"><label>11</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tu</surname><given-names>Z</given-names></name></person-group><article-title>Eight novel families of miniature inverted repeat transposable elements in the african malaria mosquito, anopheles gambiae</article-title><source>Proc Natl Acad Sci U S A</source><year>2001</year><volume>98</volume><issue>4</issue><fpage>1699</fpage><lpage>704</lpage><pub-id pub-id-type="doi">10.1073/pnas.98.4.1699</pub-id><pub-id pub-id-type="pmid">11172014</pub-id></element-citation></ref><ref id="CR12"><label>12</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chen</surname><given-names>J</given-names></name><name><surname>Hu</surname><given-names>Q</given-names></name><name><surname>Zhang</surname><given-names>Y</given-names></name><name><surname>Lu</surname><given-names>C</given-names></name><name><surname>Kuang</surname><given-names>H</given-names></name></person-group><article-title>P-mite: a database for plant miniature inverted-repeat transposable elements</article-title><source>Nucleic Acids Res</source><year>2014</year><volume>42</volume><issue>Database issue</issue><fpage>1176</fpage><pub-id pub-id-type="doi">10.1093/nar/gkt1000</pub-id></element-citation></ref><ref id="CR13"><label>13</label><mixed-citation publication-type="other">Hu J, Zheng Y, Shang X. Mitefinder: A fast approach to identify miniature inverted-repeat transposable elements on a genome-wide scale. In: 2017 IEEE International Conference on Bioinformatics and Biomedicine (BIBM), Kansas City, MO, USA. IEEE: 2017. p. 164&#x02013;8. <pub-id pub-id-type="doi">10.1109/BIBM.2017.8217644</pub-id>.</mixed-citation></ref><ref id="CR14"><label>14</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ye</surname><given-names>C</given-names></name><name><surname>Ji</surname><given-names>G</given-names></name><name><surname>Li</surname><given-names>L</given-names></name><name><surname>Liang</surname><given-names>C</given-names></name></person-group><article-title>detectir: A novel program for detecting perfect and imperfect inverted repeats using complex numbers and vector calculation</article-title><source>Plos One</source><year>2014</year><volume>9</volume><issue>11</issue><fpage>113,349</fpage><pub-id pub-id-type="doi">10.1371/journal.pone.0113349</pub-id></element-citation></ref><ref id="CR15"><label>15</label><mixed-citation publication-type="other">Lewin B, Krebs J, Kilpatrick ST, Goldstein ES. Lewin&#x02019;s GENES X. Jones and Bartlett books in computer science: Jones &#x00026; Bartlett Learning; 2011. <ext-link ext-link-type="uri" xlink:href="https://books.google.com/books?id=0pM4KbFIEb0C">https://books.google.com/books?id=0pM4KbFIEb0C</ext-link>.</mixed-citation></ref><ref id="CR16"><label>16</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Oki</surname><given-names>N</given-names></name><name><surname>Yano</surname><given-names>K</given-names></name><name><surname>Okumoto</surname><given-names>Y</given-names></name><name><surname>Tsukiyama</surname><given-names>T</given-names></name><name><surname>Teraishi</surname><given-names>M</given-names></name><name><surname>Tanisaka</surname><given-names>T</given-names></name></person-group><article-title>A genome-wide view of miniature inverted-repeat transposable elements (mites) in rice, oryza sativa ssp. japonica</article-title><source>Genes Genet Syst</source><year>2008</year><volume>83</volume><issue>4</issue><fpage>321</fpage><lpage>9</lpage><pub-id pub-id-type="doi">10.1266/ggs.83.321</pub-id><pub-id pub-id-type="pmid">18931457</pub-id></element-citation></ref><ref id="CR17"><label>17</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jiang</surname><given-names>N</given-names></name><name><surname>Feschotte</surname><given-names>C</given-names></name><name><surname>Zhang</surname><given-names>X</given-names></name><name><surname>Wessler</surname><given-names>SR</given-names></name></person-group><article-title>Using rice to understand the origin and amplification of miniature inverted repeat transposable elements (mites)</article-title><source>Curr Opin Plant Biol</source><year>2004</year><volume>7</volume><issue>2</issue><fpage>115</fpage><lpage>9</lpage><pub-id pub-id-type="doi">10.1016/j.pbi.2004.01.004</pub-id><pub-id pub-id-type="pmid">15003209</pub-id></element-citation></ref><ref id="CR18"><label>18</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Lippman</surname><given-names>SB</given-names></name><name><surname>Lajoie</surname><given-names>J</given-names></name><name><surname>Moo</surname><given-names>BE</given-names></name></person-group><source>C++ Primer</source><year>2012</year><publisher-loc>Indianapolis</publisher-loc><publisher-name>Addison-Wesley Professional</publisher-name></element-citation></ref><ref id="CR19"><label>19</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sampath</surname><given-names>P</given-names></name><name><surname>Murukarthick</surname><given-names>J</given-names></name><name><surname>Izzah</surname><given-names>NK</given-names></name><name><surname>Lee</surname><given-names>J</given-names></name><name><surname>Choi</surname><given-names>HI</given-names></name><name><surname>Shirasawa</surname><given-names>K</given-names></name><name><surname>Choi</surname><given-names>BS</given-names></name><name><surname>Liu</surname><given-names>S</given-names></name><name><surname>Nou</surname><given-names>IS</given-names></name><name><surname>Yang</surname><given-names>TJ</given-names></name></person-group><article-title>Genome-wide comparative analysis of 20 miniature inverted-repeat transposable element families in brassica rapa and b. oleracea</article-title><source>PLoS ONE</source><year>2014</year><volume>9</volume><issue>7</issue><fpage>94,499</fpage><pub-id pub-id-type="doi">10.1371/journal.pone.0094499</pub-id></element-citation></ref><ref id="CR20"><label>20</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jurka</surname><given-names>J</given-names></name><name><surname>Kapitonov</surname><given-names>VV</given-names></name><name><surname>Pavlicek</surname><given-names>A</given-names></name><name><surname>Klonowski</surname><given-names>P</given-names></name><name><surname>Kohany</surname><given-names>O</given-names></name><name><surname>Walichiewicz</surname><given-names>J</given-names></name></person-group><article-title>Repbase update, a database of eukaryotic repetitive elements</article-title><source>Cytogenet Genome Res</source><year>2005</year><volume>110</volume><issue>1&#x02013;4</issue><fpage>462</fpage><lpage>7</lpage><pub-id pub-id-type="doi">10.1159/000084979</pub-id><pub-id pub-id-type="pmid">16093699</pub-id></element-citation></ref><ref id="CR21"><label>21</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>George</surname><given-names>H</given-names></name><name><surname>Rothschild</surname><given-names>AS</given-names></name></person-group><article-title>Agreement, the F-Measure, and Reliability in Information Retrieval</article-title><source>J Am Med Inform Assoc</source><year>2005</year><volume>12</volume><issue>3</issue><fpage>296</fpage><lpage>298</lpage><pub-id pub-id-type="doi">10.1197/jamia.M1733</pub-id><pub-id pub-id-type="pmid">15684123</pub-id></element-citation></ref></ref-list></back></article>